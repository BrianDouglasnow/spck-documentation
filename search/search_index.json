{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Spck Code Editor Spck (pronouced as \"spec\") Editor enables you to work on JavaScript projects whenever, wherever. If its a new single-page app, a game, data visualizations, 3D simulations, or anything else that can be realized using the magic of JavaScript, HTML, and CSS, Spck Editor hopes to be the code editor of your choice. Android App Spck Editor is currently available on Android. Chrome Store & iOS support are coming, but not yet ready. Meanwhile, if it's your first time here, feel free to checkout a list of features below. Features Overview Hints Code hints are an essential aid to mastering external libraries. They also offer a convenience in your own code, and provide incentives to better document code with JSDoc comment strings. Autocompletion Make less typos with the awesome code completion provided by the editor. Code completions are handled by the awesome TypeScript libraries provided by VS Code. Themes The editor supports a variety of themes including XCode, Chrome, Dracula, Monokai, Ayu Mirage, and Ayu Light. Markdown If you ever need to preview a Markdown file, you can do so right in the editor. Built upon the awesome Markdown-it library. Github Export your changes right to your Github repo. If you need to make live edits to Github, you can do so right in the editor. The editor provides basic Github integration including code diffs, highlighted files with changes, pulling and committing. Be sure to give it a try. Also please checkout our Github repos on more info on embedding Spck Editor in your own site as well as libraries that Spck Editor is built upon. Diffs File diffing is an awesome feature that any great code editor with git integration needs. More features will be added to the code differ in the near future, for example, char-by-char diffs as well as in-place diff editting. Import & Export Zip An alternative to Github commits is exporting your project as a zip file. You can transfer your project to another device by the reverse operation of importing. Note that the exported file may have Unix-style newlines (meaning a single \"\\n\" character instead of \"\\r\\n\", however, any proper code editor should handle this automatically in Windows. Search Project-wide code searching is a useful tool for any JavaScript development. Navigating between files by keywords and refactoring are all made easier with an awesome fast search feature. There's still room to improve with the editor's search, so we need your feedback on any ideas to improve the editor! Live Preview Live previewing is a feature so essential, its barely worth mentioning. However... Spck Editor supports two modes of previewing, in a separate browser tab as well as an inline iframe for quicker edits-to-preview. Additionally, previewing also work great in Spck Editor's mobile app. So if your interested in giving JavaScript development a try on your mobile device, be sure to download our mobile app . window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-124804584-3');","title":"Home"},{"location":"#spck-code-editor","text":"Spck (pronouced as \"spec\") Editor enables you to work on JavaScript projects whenever, wherever. If its a new single-page app, a game, data visualizations, 3D simulations, or anything else that can be realized using the magic of JavaScript, HTML, and CSS, Spck Editor hopes to be the code editor of your choice.","title":"Spck Code Editor"},{"location":"#android-app","text":"Spck Editor is currently available on Android. Chrome Store & iOS support are coming, but not yet ready. Meanwhile, if it's your first time here, feel free to checkout a list of features below.","title":"Android App"},{"location":"#features-overview","text":"","title":"Features Overview"},{"location":"#hints","text":"Code hints are an essential aid to mastering external libraries. They also offer a convenience in your own code, and provide incentives to better document code with JSDoc comment strings.","title":"Hints"},{"location":"#autocompletion","text":"Make less typos with the awesome code completion provided by the editor. Code completions are handled by the awesome TypeScript libraries provided by VS Code.","title":"Autocompletion"},{"location":"#themes","text":"The editor supports a variety of themes including XCode, Chrome, Dracula, Monokai, Ayu Mirage, and Ayu Light.","title":"Themes"},{"location":"#markdown","text":"If you ever need to preview a Markdown file, you can do so right in the editor. Built upon the awesome Markdown-it library.","title":"Markdown"},{"location":"#github","text":"Export your changes right to your Github repo. If you need to make live edits to Github, you can do so right in the editor. The editor provides basic Github integration including code diffs, highlighted files with changes, pulling and committing. Be sure to give it a try. Also please checkout our Github repos on more info on embedding Spck Editor in your own site as well as libraries that Spck Editor is built upon.","title":"Github"},{"location":"#diffs","text":"File diffing is an awesome feature that any great code editor with git integration needs. More features will be added to the code differ in the near future, for example, char-by-char diffs as well as in-place diff editting.","title":"Diffs"},{"location":"#import-export-zip","text":"An alternative to Github commits is exporting your project as a zip file. You can transfer your project to another device by the reverse operation of importing. Note that the exported file may have Unix-style newlines (meaning a single \"\\n\" character instead of \"\\r\\n\", however, any proper code editor should handle this automatically in Windows.","title":"Import &amp; Export Zip"},{"location":"#search","text":"Project-wide code searching is a useful tool for any JavaScript development. Navigating between files by keywords and refactoring are all made easier with an awesome fast search feature. There's still room to improve with the editor's search, so we need your feedback on any ideas to improve the editor!","title":"Search"},{"location":"#live-preview","text":"Live previewing is a feature so essential, its barely worth mentioning. However... Spck Editor supports two modes of previewing, in a separate browser tab as well as an inline iframe for quicker edits-to-preview. Additionally, previewing also work great in Spck Editor's mobile app. So if your interested in giving JavaScript development a try on your mobile device, be sure to download our mobile app . window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-124804584-3');","title":"Live Preview"},{"location":"editor-settings/","text":"Editor Settings Yay! This is a page dedicated to describing the long, tedious, and complex settings to use the editor. Hence, the name of this section. Nah, I promsie it won't be that bad. In fact, settings in Spck Editor are fairly straightforward (hopefully). Appearance Animation : Enables or disables most CSS animations. Disable editor animations if they are running slow on your device. Results in better performance and faster transitions. Theme : Changes the colors of the code editor. Dark and light editor theme are tied with this setting. Editor Check Syntax : Creates a web worker to check the syntax of JavaScript, CSS, and HTML files. Other languages may or may not be supported for syntax checking. Font Size : Changes the font size of the code editor. Indent Guides : Adds indent guidelines to the code editor for visual guidance. Line Numbers : Toggles the line numbers in the code editor. Tab Size : Changes the number of spaces a tab represents in the code editor. Word Wrap : Toggles soft line wraps in the code editor. Note: These settings affect both the main editor as well as the diff editor. Touch Touch Features : Toggles on and off all touch features. This includes touch primary keyboard, files touch mode, and other touch features for the code editor. Extra Touch Keyboard : Toggles the extra touch keyboard which contains key options for common code keywords and symbols. Note: These settings are only available on devices with a touch screen. Preview Live Preview : Toggles auto-refreshing in the preview iframe when file changes are made. This feature is not useful in the mobile version. About A section of the settings containing miscellaneous information about the editor. Contains the version information, and a link to report issues with the editor. There is also an option to revoke privacy permissions granted to the app. Warning : Revoking privacy information means removing all projects, files, and other user data that the app stores. window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-124804584-3');","title":"Editor Settings"},{"location":"editor-settings/#editor-settings","text":"Yay! This is a page dedicated to describing the long, tedious, and complex settings to use the editor. Hence, the name of this section. Nah, I promsie it won't be that bad. In fact, settings in Spck Editor are fairly straightforward (hopefully).","title":"Editor Settings"},{"location":"editor-settings/#appearance","text":"Animation : Enables or disables most CSS animations. Disable editor animations if they are running slow on your device. Results in better performance and faster transitions. Theme : Changes the colors of the code editor. Dark and light editor theme are tied with this setting.","title":"Appearance"},{"location":"editor-settings/#editor","text":"Check Syntax : Creates a web worker to check the syntax of JavaScript, CSS, and HTML files. Other languages may or may not be supported for syntax checking. Font Size : Changes the font size of the code editor. Indent Guides : Adds indent guidelines to the code editor for visual guidance. Line Numbers : Toggles the line numbers in the code editor. Tab Size : Changes the number of spaces a tab represents in the code editor. Word Wrap : Toggles soft line wraps in the code editor. Note: These settings affect both the main editor as well as the diff editor.","title":"Editor"},{"location":"editor-settings/#touch","text":"Touch Features : Toggles on and off all touch features. This includes touch primary keyboard, files touch mode, and other touch features for the code editor. Extra Touch Keyboard : Toggles the extra touch keyboard which contains key options for common code keywords and symbols. Note: These settings are only available on devices with a touch screen.","title":"Touch"},{"location":"editor-settings/#preview","text":"Live Preview : Toggles auto-refreshing in the preview iframe when file changes are made. This feature is not useful in the mobile version.","title":"Preview"},{"location":"editor-settings/#about","text":"A section of the settings containing miscellaneous information about the editor. Contains the version information, and a link to report issues with the editor. There is also an option to revoke privacy permissions granted to the app. Warning : Revoking privacy information means removing all projects, files, and other user data that the app stores. window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-124804584-3');","title":"About"},{"location":"embedding/","text":"Embedding Spck Editor One of the features that make Spck Editor unique is the ability to embed the code editor on your very own site. If you have a demo that requires a fully featured, interactive, code editor with a proper virtual file system and previewing support, then look no further. Setup The details of doing this is covered on the Github page. But a quick summary: Download the spck-embed library from npm or bower package manager. Add an iframe to your site linking to https://embed.spck.io . Control the editor using the APIs provided by the library. Use Cases Some use cases planned in the roadmap for this feature are: Editor tools: like HTML cleaners, converters, validators, previewers for new languages. (Vue file support maybe?). Teaching, create code demos that can be interacted with. Step-by-step tutorials using a live editor. These are just some examples of possible uses, although additional features may be required to fulfill them. Issues Please raise an issue on the Github page if you have an issue, request or suggestion with the embedded code editor. Demo Below are some sites already using the embedded code editor: Indent.js Angular-Query-Builder If you have a project using the embedded code editor, we'd love to hear about it. Leave us a note by email, or through Github if you want to include it on this page. window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-124804584-3');","title":"Embedding Spck Editor"},{"location":"embedding/#embedding-spck-editor","text":"One of the features that make Spck Editor unique is the ability to embed the code editor on your very own site. If you have a demo that requires a fully featured, interactive, code editor with a proper virtual file system and previewing support, then look no further.","title":"Embedding Spck Editor"},{"location":"embedding/#setup","text":"The details of doing this is covered on the Github page. But a quick summary: Download the spck-embed library from npm or bower package manager. Add an iframe to your site linking to https://embed.spck.io . Control the editor using the APIs provided by the library.","title":"Setup"},{"location":"embedding/#use-cases","text":"Some use cases planned in the roadmap for this feature are: Editor tools: like HTML cleaners, converters, validators, previewers for new languages. (Vue file support maybe?). Teaching, create code demos that can be interacted with. Step-by-step tutorials using a live editor. These are just some examples of possible uses, although additional features may be required to fulfill them.","title":"Use Cases"},{"location":"embedding/#issues","text":"Please raise an issue on the Github page if you have an issue, request or suggestion with the embedded code editor.","title":"Issues"},{"location":"embedding/#demo","text":"Below are some sites already using the embedded code editor: Indent.js Angular-Query-Builder If you have a project using the embedded code editor, we'd love to hear about it. Leave us a note by email, or through Github if you want to include it on this page. window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-124804584-3');","title":"Demo"},{"location":"getting-started/","text":"Getting Started Getting started with a new editor can be a challenging experience for a beginner, but even more so for a well-experienced coder. It was certainly a challenging experience for me to learn IDEs like Eclipse and XCode. That being said, thats where this guide comes in. Here, you will learn the basics of creating a new project, adding files to your project, and previewing your project in the browser. As a side note, if you are using the editor on a mobile device it is encouraged to try the mobile app for the editor: Table of Contents Creating Your First Project Create a New Project Import a Github Repo Adding Files Basics Folders Upload Files Previewing Creating Your First Project There are two ways to create projects: * Create a new seed project with templates * Import a project from an existing Github repo Create a New Project To create a new project from templates, go to the \"Projects\" tab in the side menu. Open the add dropdown, and select the \" New Project \" option below. This will open up the project creation prompt. Here, you can choose from a list of JavaScript & CSS framework options. To create an empty project, select \"No Framework\" to proceed. List of frameworks currently available: JavaScript Angular AngularJS React D3 Vue CSS Bootstrap Material Design Lite UIkit Enter your project name and click \" Create \". Your new project should be created in the \"Projects\" tab. Import a Github Repo To import a repository from Github into the editor, first select the \" Mount Git Repo \" option from the \"Projects\" tab menu. You will be presented with a prompt to enter the url of the repository to import. If you are importing a large project with more than ~20 or so files, please add a Github token. Github API limits will prevent the project from being imported! To add a Github token please see the section Adding a Personal Github Token . In the example, we are using the Spoon Knife repository (https://github.com/octocat/Spoon-Knife). Click \" OK \" to proceed to fetch the latest copy of the branch from Github. Note this will not clone the entire repository. Instead only the latest commit tree of the branch will be downloaded to the editor. If you get an error, it probably means you have exceeded your Github API limit usage. You can add your personal Github token following the instructions here . Your cloned Github Repo should appear in the \"Projects\" tab. You can switch branches as well. To see details on how to do that, please refer to the section Changing Git Branches . Adding Files Basics To add a file in your newly created project, select the \" File \" option in the \"Files\" tab. Enter a file name or file path into the prompt and press \" OK \". File paths use '/' as the path separator. If the file path's directory does not exist, then the directory will be created automatically. Your file should be created in the \"Files\" tab. Note that you can use spaces or almost any other characters in the file path. Folders By default, using the add menu will put files and folders in the project root directory. Alternatively, you can right click the folder you want to create resources under. This will open up the following menu: On mobile, the menu will open by clicking on the more options icon. Upload Files You can choose files from your computer to be uploaded. Select \"Upload File\" and choose one or more files to be uploaded to the folder. Previewing There are two options for previewing: You can launch a new browser showing the index.html page of the project. (This window is separate from the editor and does not respond to live preview.) You can launch a side preview frame on larger screens, which works with live preview. You can also change which HTML file to preview from the top bar. Pressing the \"Play\" button will launch a side window, while the \"Launch button\" will open a new browser. On the mobile version, only the launch option is available. The launch feature is more streamlined for mobile and carries additional features like integrated JavaScript console on Android. Setting Default Launch File The default file to preview upon clicking \"Launch\" can be changed. To change the default file, right-click any HTML file and select the \" Launch Default \" option. A blue file icon next to any HTML file indicates the current project's default file. window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-124804584-3');","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"Getting started with a new editor can be a challenging experience for a beginner, but even more so for a well-experienced coder. It was certainly a challenging experience for me to learn IDEs like Eclipse and XCode. That being said, thats where this guide comes in. Here, you will learn the basics of creating a new project, adding files to your project, and previewing your project in the browser. As a side note, if you are using the editor on a mobile device it is encouraged to try the mobile app for the editor:","title":"Getting Started"},{"location":"getting-started/#table-of-contents","text":"Creating Your First Project Create a New Project Import a Github Repo Adding Files Basics Folders Upload Files Previewing","title":"Table of Contents"},{"location":"getting-started/#creating-your-first-project","text":"There are two ways to create projects: * Create a new seed project with templates * Import a project from an existing Github repo","title":"Creating Your First Project"},{"location":"getting-started/#create-a-new-project","text":"To create a new project from templates, go to the \"Projects\" tab in the side menu. Open the add dropdown, and select the \" New Project \" option below. This will open up the project creation prompt. Here, you can choose from a list of JavaScript & CSS framework options. To create an empty project, select \"No Framework\" to proceed. List of frameworks currently available: JavaScript Angular AngularJS React D3 Vue CSS Bootstrap Material Design Lite UIkit Enter your project name and click \" Create \". Your new project should be created in the \"Projects\" tab.","title":"Create a New Project"},{"location":"getting-started/#import-a-github-repo","text":"To import a repository from Github into the editor, first select the \" Mount Git Repo \" option from the \"Projects\" tab menu. You will be presented with a prompt to enter the url of the repository to import. If you are importing a large project with more than ~20 or so files, please add a Github token. Github API limits will prevent the project from being imported! To add a Github token please see the section Adding a Personal Github Token . In the example, we are using the Spoon Knife repository (https://github.com/octocat/Spoon-Knife). Click \" OK \" to proceed to fetch the latest copy of the branch from Github. Note this will not clone the entire repository. Instead only the latest commit tree of the branch will be downloaded to the editor. If you get an error, it probably means you have exceeded your Github API limit usage. You can add your personal Github token following the instructions here . Your cloned Github Repo should appear in the \"Projects\" tab. You can switch branches as well. To see details on how to do that, please refer to the section Changing Git Branches .","title":"Import a Github Repo"},{"location":"getting-started/#adding-files","text":"","title":"Adding Files"},{"location":"getting-started/#basics","text":"To add a file in your newly created project, select the \" File \" option in the \"Files\" tab. Enter a file name or file path into the prompt and press \" OK \". File paths use '/' as the path separator. If the file path's directory does not exist, then the directory will be created automatically. Your file should be created in the \"Files\" tab. Note that you can use spaces or almost any other characters in the file path.","title":"Basics"},{"location":"getting-started/#folders","text":"By default, using the add menu will put files and folders in the project root directory. Alternatively, you can right click the folder you want to create resources under. This will open up the following menu: On mobile, the menu will open by clicking on the more options icon.","title":"Folders"},{"location":"getting-started/#upload-files","text":"You can choose files from your computer to be uploaded. Select \"Upload File\" and choose one or more files to be uploaded to the folder.","title":"Upload Files"},{"location":"getting-started/#previewing","text":"There are two options for previewing: You can launch a new browser showing the index.html page of the project. (This window is separate from the editor and does not respond to live preview.) You can launch a side preview frame on larger screens, which works with live preview. You can also change which HTML file to preview from the top bar. Pressing the \"Play\" button will launch a side window, while the \"Launch button\" will open a new browser. On the mobile version, only the launch option is available. The launch feature is more streamlined for mobile and carries additional features like integrated JavaScript console on Android.","title":"Previewing"},{"location":"getting-started/#setting-default-launch-file","text":"The default file to preview upon clicking \"Launch\" can be changed. To change the default file, right-click any HTML file and select the \" Launch Default \" option. A blue file icon next to any HTML file indicates the current project's default file. window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-124804584-3');","title":"Setting Default Launch File"},{"location":"git-features/","text":"Git Features Github currently is one of the main ways of exporting projects from the editor. (For other ways of exporting your work, see section on Importing & Exporting ) Although other ways of exporting such as to shared drives is planned for the future. Right now Github is the only supported git repository provider by this editor. This document tries to summarize the git integration that is already available int he editor. Table of Contents Getting Started Mounting a Github Repo Pulling Remote Changes Merge Conflicts Adding a Personal Github Token Branching Creating Branches Changing Git Branches File Diffs Viewing Diffs Commiting Getting Started Mounting a Github Repo The process of mounting a Github repo has already been covered in the section Import a Github Repo . It will not be covered here; note that it is recommended to add a Github personal token to allow for mounting of bigger repositories as well as to increase your daily usage limits of Github's APIs. Pulling Remote Changes Pulling will download any changes on the remote Github server that the editor is missing. Essentially, this is the process lets the editor's repository catch up on changes made by others to the remote repository. To pull changes from the remote repository, open the project's options menu and select the \" Pull Changes \" option. If there is a discrepency between a file's last known state between the remote repo and the editor, then the file is marked as having a merge conflict. This is covered in more detail in the section Merge Conflicts . Merge Conflicts Sometimes a file have a discrepancy with the remote repository, and the history cannot differentiate which one is newer. As a result, the file is marked as having a \"Merge Conflict\". These files will be marked in purple . Projects with merge conflicts cannot push commits to the remote repository until all merge conflicts are resolved. Currently the only way to resolve merge conflicts is to manually mark them as resolved by right-clicking on the file and selecting the \" Mark Resolved \" option. Adding a Personal Github Token Adding a personal Github Token to the app will increase the rate limit usage of Github APIs to 5000 requests per hour. This is more than enough to download most repositories. It is recommended to use a Github personal token (which requires a Github account) if you are mounting repositories with more than ~20 or so files. To add a Github token, choose the \" Add Git Token \" option from the menu in the \"Projects\" tab. In the prompt that appears you need to enter the Github personal token that you generated, as well as author username and email for commits. If you leave this blank, then the editor defaults will be used instead for the email and username. To Generate the Github token on the website, click the \" here \" link provided in the \"Add Github Token\" prompt. Next click \" Generate new token \" button on Github's page. Enter the token name and select all \" repo \" permissions. Branching Creating Branches Currently, creating branches is not possible in the editor. Branches would have be to created on Github until this feature is implemented. Changing Git Branches To change the current branch, go to the \"Files\" tab menu and select the \" Switch Branch \" option. Alternatively, switching branches can also be done form the \"Projects\" tab. This will open up the \"Switch Branch\" prompt. The project's current branch will be the current selected option. Choose an available branch from the selection menu and click \" OK \" to proceed. If there are uncommited changes in the branch before switching, they will be stored locally. Next time you switch back to the original branch, the changes will be brought back. File Diffs Sometimes you need to see changes between your local repository and the remote repository; this is when a diff viewer is needed. Spck Editor has a built-in diff viewer for files that have changed from the remote repo. Viewing Diffs To view changes that have occurred, select a file marked in yellow or blue depending on if the editor is in \"dark\" or \"light\" mode. This should open up a modal with a unified view of the diffs. Currently, the editor does not offer any editing features in the diff viewer. Committing To make a Github commit, select the \" Push Changes \" option from the menu in the \"Files\" tab. Pushing changes require a Github token. To add a Github token please see the section on Adding a Personal Github Token . If you receive a 401 or 403 error, it means that the token you have provided does not have the permissions necessary to commit to the current repository. window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-124804584-3');","title":"Git Features"},{"location":"git-features/#git-features","text":"Github currently is one of the main ways of exporting projects from the editor. (For other ways of exporting your work, see section on Importing & Exporting ) Although other ways of exporting such as to shared drives is planned for the future. Right now Github is the only supported git repository provider by this editor. This document tries to summarize the git integration that is already available int he editor.","title":"Git Features"},{"location":"git-features/#table-of-contents","text":"Getting Started Mounting a Github Repo Pulling Remote Changes Merge Conflicts Adding a Personal Github Token Branching Creating Branches Changing Git Branches File Diffs Viewing Diffs Commiting","title":"Table of Contents"},{"location":"git-features/#getting-started","text":"","title":"Getting Started"},{"location":"git-features/#mounting-a-github-repo","text":"The process of mounting a Github repo has already been covered in the section Import a Github Repo . It will not be covered here; note that it is recommended to add a Github personal token to allow for mounting of bigger repositories as well as to increase your daily usage limits of Github's APIs.","title":"Mounting a Github Repo"},{"location":"git-features/#pulling-remote-changes","text":"Pulling will download any changes on the remote Github server that the editor is missing. Essentially, this is the process lets the editor's repository catch up on changes made by others to the remote repository. To pull changes from the remote repository, open the project's options menu and select the \" Pull Changes \" option. If there is a discrepency between a file's last known state between the remote repo and the editor, then the file is marked as having a merge conflict. This is covered in more detail in the section Merge Conflicts .","title":"Pulling Remote Changes"},{"location":"git-features/#merge-conflicts","text":"Sometimes a file have a discrepancy with the remote repository, and the history cannot differentiate which one is newer. As a result, the file is marked as having a \"Merge Conflict\". These files will be marked in purple . Projects with merge conflicts cannot push commits to the remote repository until all merge conflicts are resolved. Currently the only way to resolve merge conflicts is to manually mark them as resolved by right-clicking on the file and selecting the \" Mark Resolved \" option.","title":"Merge Conflicts"},{"location":"git-features/#adding-a-personal-github-token","text":"Adding a personal Github Token to the app will increase the rate limit usage of Github APIs to 5000 requests per hour. This is more than enough to download most repositories. It is recommended to use a Github personal token (which requires a Github account) if you are mounting repositories with more than ~20 or so files. To add a Github token, choose the \" Add Git Token \" option from the menu in the \"Projects\" tab. In the prompt that appears you need to enter the Github personal token that you generated, as well as author username and email for commits. If you leave this blank, then the editor defaults will be used instead for the email and username. To Generate the Github token on the website, click the \" here \" link provided in the \"Add Github Token\" prompt. Next click \" Generate new token \" button on Github's page. Enter the token name and select all \" repo \" permissions.","title":"Adding a Personal Github Token"},{"location":"git-features/#branching","text":"","title":"Branching"},{"location":"git-features/#creating-branches","text":"Currently, creating branches is not possible in the editor. Branches would have be to created on Github until this feature is implemented.","title":"Creating Branches"},{"location":"git-features/#changing-git-branches","text":"To change the current branch, go to the \"Files\" tab menu and select the \" Switch Branch \" option. Alternatively, switching branches can also be done form the \"Projects\" tab. This will open up the \"Switch Branch\" prompt. The project's current branch will be the current selected option. Choose an available branch from the selection menu and click \" OK \" to proceed. If there are uncommited changes in the branch before switching, they will be stored locally. Next time you switch back to the original branch, the changes will be brought back.","title":"Changing Git Branches"},{"location":"git-features/#file-diffs","text":"Sometimes you need to see changes between your local repository and the remote repository; this is when a diff viewer is needed. Spck Editor has a built-in diff viewer for files that have changed from the remote repo.","title":"File Diffs"},{"location":"git-features/#viewing-diffs","text":"To view changes that have occurred, select a file marked in yellow or blue depending on if the editor is in \"dark\" or \"light\" mode. This should open up a modal with a unified view of the diffs. Currently, the editor does not offer any editing features in the diff viewer.","title":"Viewing Diffs"},{"location":"git-features/#committing","text":"To make a Github commit, select the \" Push Changes \" option from the menu in the \"Files\" tab. Pushing changes require a Github token. To add a Github token please see the section on Adding a Personal Github Token . If you receive a 401 or 403 error, it means that the token you have provided does not have the permissions necessary to commit to the current repository. window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-124804584-3');","title":"Committing"},{"location":"importing-exporting/","text":"Importing & Exporting Currently, the only way to import an existing project is through Github or a local zip file. However, integration with additional Git providers and third-party providers, such as Gitlab and Dropbox are on the roadmap. For now, exporting and importing zip files offer a convenient means of transfering your projects around without having to use Github. Import Zip Archive To import a zip file with your project contained within, select the option \" Import Zip File \" from the menu in the \"Projects\" tab. In the prompt that appears, enter a new project name for the imported zip archive. After clicking \" OK \" to continue, the imported files should appear in your new project. Export Zip Archive To export your project select the \" Export Zip \" option from either the menu in the \"Files\" or \"Projects\" tab. After doing so, enter the name of the zip file that will be saved to your default \"Downloads\" location. After clicking \" OK \", the download for your zip file should begin. window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-124804584-3');","title":"Importing & Exporting"},{"location":"importing-exporting/#importing-exporting","text":"Currently, the only way to import an existing project is through Github or a local zip file. However, integration with additional Git providers and third-party providers, such as Gitlab and Dropbox are on the roadmap. For now, exporting and importing zip files offer a convenient means of transfering your projects around without having to use Github.","title":"Importing &amp; Exporting"},{"location":"importing-exporting/#import-zip-archive","text":"To import a zip file with your project contained within, select the option \" Import Zip File \" from the menu in the \"Projects\" tab. In the prompt that appears, enter a new project name for the imported zip archive. After clicking \" OK \" to continue, the imported files should appear in your new project.","title":"Import Zip Archive"},{"location":"importing-exporting/#export-zip-archive","text":"To export your project select the \" Export Zip \" option from either the menu in the \"Files\" or \"Projects\" tab. After doing so, enter the name of the zip file that will be saved to your default \"Downloads\" location. After clicking \" OK \", the download for your zip file should begin. window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-124804584-3');","title":"Export Zip Archive"}]}